import boto3
import datetime


def get_events(log, logstream, server):
  mydict = {}
  success=0
  failure=0
  f = open(server+'-'+logstream+'.txt', 'w')
  client = session.client('logs', region_name = 'us-east-1')
  print(f"{log} {logstream} {server}")
  all_events = []
  response = client.get_log_events( logGroupName=log, logStreamName=logstream)
  all_events += response.get('events')
#  while 'nextForwardToken' in response:
#    response = client.get_log_events( logGroupName=log, logStreamName=logstream, nextToken=response.get('nextForwardToken'))
#    all_events += response.get('events')
#    print(f"{response.get('nextForwardToken')}")

  for row in all_events:
    row.update( { 'hostname':server } )
    entry = row.get('message')
    if len(entry.split()) == 14:
      ver, acct, interface, srcaddr, dstaddr, srcport, dstport, protocol, numpackets, numbytes, starttime, endtime, action, logstatus = entry.split()
      success += 1
      if starttime != '-':
          starttime = int(starttime)
          starttime = datetime.datetime.fromtimestamp(starttime).strftime('%Y-%m-%d %H:%M:%S')

      if endtime != '-':
        endtime = int(endtime)
        endtime = datetime.datetime.fromtimestamp(endtime).strftime('%Y-%m-%d %H:%M:%S')


      if protocol == '17':
        protocol = 'TCP'
      elif protocol == '6':
        protocol = 'UDP'

      if srcport == '22':
        srcport = 'SSH'

      if dstport == '22':
        dstport = 'SSH'

      if srcport == '53':
          srcport = 'DNS'

      if dstport == '53':
        dstport = 'DNS'

      if srcport == '123':
        srcport = 'NTP'

      if dstport == '123':
        dstport = 'NTP'

      if srcport == '135' or  srcport == '136' or  srcport == '137' or  srcport == '138' or  srcport == '139':
        srcport = 'NetBIOS'

      if dstport == '135' or  dstport == '136' or  dstport == '137' or  dstport == '138' or  dstport == '139':
        dstport = 'NetBIOS'

      if srcport == '80':
        srcport = 'HTTP'

      if dstport == '80':
        dstport = 'HTTP'

      if srcport == '389':
        srcport = 'RDP'

      if dstport == '389':
        dstport = 'RDP'

      if srcport == '443':
        srcport = 'HTTPS'

      if dstport == '443':
        dstport = 'HTTPS'

      mydict.update({'ver':ver})
      mydict.update({'acct':acct})
      mydict.update({'interface':interface})
      mydict.update({'srcaddr':srcaddr}) 
      mydict.update({'dstaddr':dstaddr})
      mydict.update({'srcport':srcport})
      mydict.update({'dstport':dstport})
      mydict.update({'protocol':protocol})
      mydict.update({'numpackets':numpackets})
      mydict.update({'numbytes': numbytes})
      mydict.update({'starttime': starttime})
      mydict.update({'endtime': endtime})
      mydict.update({'action': action})
      mydict.update({'logstatus': logstatus})
      mydict.update({'hostname':server})

    else:
      failure +=1

    f.write(str(mydict)+ '\n')
  print(f"Success: {success} Failure: {failure}")

  f.close()
profile_list = [ '133', '202', '230', '272', '353', '439',] 
for profile in profile_list:
    # create a Boto 3 session
    session = boto3.Session(profile_name=profile)
    client = session.client('logs', region_name='us-east-1')
    
    #
    # log groups
    #
    
    # describe log groups
    response = client.describe_log_groups()
    
    # traverse through all the log groups
    while 'nextToken' in response:
      response = describe_log_groups(nextToken=response.get('nextToken'))
    
    loggroup = []
    # print out name of log groups
    for row in response.get('logGroups'):
      if 'cfg' and 'vpc' in row.get('logGroupName'):
        loggroup.append(row.get('logGroupName'))
    
    #
    # logstreams
    #
    all_logstreams = []
    for log in loggroup:
      loggroupstreams={}
      interfaces = []
      all_streams = []
      stream_batch=client.describe_log_streams(logGroupName=log)
      all_streams += stream_batch.get('logStreams')
      while 'nextToken' in stream_batch:
        stream_batch=client.describe_log_streams(logGroupName=log, nextToken=stream_batch.get('nextToken'))
        all_streams += stream_batch.get('logStreams')
      for row in all_streams:
        interfaces.append(row.get('logStreamName'))
    
      loggroupstreams = ( { log : interfaces } )
      all_logstreams.append(loggroupstreams) 
    
    client = session.client('ec2', region_name = 'us-east-1')
#    for row in client.describe_network_interfaces().get('NetworkInterfaces'):
#        print(row.get('NetworkInterfaceId'))
    
#    for row in client.describe_tags().get('Tags'): 
#        if row.get('ResourceType') == 'instance' and row.get('Key') == 'Name':
#            print(f"{row.get('ResourceId')}\t{row.get('Value')}")
    count = 0
    print(f"--------------------{profile}---------------")
    for row in client.describe_tags().get('Tags'): 
        if row.get('ResourceType') == 'instance' and row.get('Key') == 'Name':
            name = row.get('Value')
            for row in client.describe_instances( Filters = [ { 'Name': 'instance-id', 'Values': [ row.get('ResourceId') ] } ] ).get('Reservations'):
                for i in row.get('Instances'):
                    for each in i.get('NetworkInterfaces'):
                        networkid = each.get('NetworkInterfaceId')
                        for row in all_logstreams:
                            for key, value in row.items():
                                for v in value:
                                    if networkid+'-all' in v and 'cfg' in key:
                                        count += 1
                                        # print(f"{count} {name} with netowrk interface: {each.get('NetworkInterfaceId')} {key}")
                                        # 18 plnasrattic with netowrk interface: eni-0d2d9e5d flowlogs-prod-vpc-bd1226d9
                                        get_events(key, each.get('NetworkInterfaceId')+'-all', name)
                                        break
    
    #for row in all_logstreams:
    #    count=0
    #    for key, value in row.items():
    #        for val in value:
    #            count += 1
    #            print(f"{count} {key} {val}")
